<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RDFSharp</name>
    </assembly>
    <members>
        <member name="T:RDFSharp.Store.RDFMemoryStore">
            <summary>
            RDFMemoryStore represents an in-memory RDF store engine.
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStore">
            <summary>
            RDFStore represents an abstract RDF store, baseline for Memory or SQL-based implementations.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ToString">
            <summary>
            Gives the string representation of the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.Equals(RDFSharp.Store.RDFStore)">
            <summary>
            Performs the equality comparison between two stores
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.MergeGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Merges the given graph into the store, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.AddQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Adds the given quadruple to the store, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Removes the given quadruples from the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContext(RDFSharp.Store.RDFContext)">
            <summary>
            Removes the quadruples with the given context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given (non-blank) predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given resource as object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given literal as object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ClearQuadruples">
            <summary>
            Clears the quadruples of the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ContainsQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Checks if the store contains the given quadruple 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectAllQuadruples">
            <summary>
            Gets a store containing all quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruplesByContext(RDFSharp.Store.RDFContext)">
            <summary>
            Gets a store containing quadruples with the specified context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Gets a store containing quadruples with the specified subject 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Gets a store containing quadruples with the specified predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Gets a store containing quadruples with the specified object 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets a store containing quadruples with the specified literal 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruples(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets a store containing quadruples satisfying the given pattern
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStore.StoreID">
            <summary>
            Unique representation of the store
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStore.StoreType">
            <summary>
            Type of the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.#ctor">
            <summary>
            Default-ctor to build an empty memory store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.#ctor(System.Collections.Generic.List{RDFSharp.Store.RDFQuadruple})">
            <summary>
            List-based ctor to build a memory store with the given list of quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.ToString">
            <summary>
            Gives the string representation of the Memory store 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.Equals(RDFSharp.Store.RDFMemoryStore)">
            <summary>
            Performs the equality comparison between two memory stores
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.System#Collections#Generic#IEnumerable{RDFSharp#Store#RDFQuadruple}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the store's quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the store's quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.MergeGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Merges the given graph into the store, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.AddQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Adds the given quadruple to the store, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Removes the given quadruple from the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContext(RDFSharp.Store.RDFContext)">
            <summary>
            Removes the quadruples with the given context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given (non-blank) predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given resource as object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given literal as object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.ClearQuadruples">
            <summary>
            Clears the quadruples of the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.ContainsQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Checks if the store contains the given quadruple
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.SelectAllQuadruples">
            <summary>
            Gets a store containing all the quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.SelectQuadruplesByContext(RDFSharp.Store.RDFContext)">
            <summary>
            Gets a store containing quadruples with the specified context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.SelectQuadruplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Gets a store containing quadruples with the specified subject 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.SelectQuadruplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Gets a store containing quadruples with the specified predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.SelectQuadruplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Gets a store containing quadruples with the specified object 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.SelectQuadruplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets a store containing quadruples with the specified literal 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.SelectQuadruples(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets a store containing quadruples satisfying the given pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.IntersectWith(RDFSharp.Store.RDFStore)">
            <summary>
            Builds a new intersection store from this store and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.UnionWith(RDFSharp.Store.RDFStore)">
            <summary>
            Builds a new union store from this store and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.DifferenceWith(RDFSharp.Store.RDFStore)">
            <summary>
            Builds a new difference store from this store and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.ToDataTable">
            <summary>
            Converts the store into a "Context-Subject-Predicate-Object" datatable 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.FromDataTable(System.Data.DataTable)">
            <summary>
            Creates a store from a "Context-Subject-Predicate-Object" datatable 
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFMemoryStore.QuadruplesCount">
            <summary>
            Count of the store's quadruples
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFMemoryStore.QuadruplesEnumerator">
            <summary>
            Gets the enumerator on the store's quadruples for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFMemoryStore.StoreGUID">
            <summary>
            Identifier of the memory store
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFMemoryStore.StoreIndex">
            <summary>
            Index on the quadruples of the store
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFMemoryStore.Quadruples">
            <summary>
            List of quadruples embedded into the store
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFLimitModifier">
            <summary>
            RDFLimitModifier is a modifier which applies an upper-bound counter to the number of query results to be considered. 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFModifier">
            <summary>
            RDFModifier represents a modifier to be applied on a query results table.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFModifier.ToString">
            <summary>
            Gives the string representation of the modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFModifier.Equals(RDFSharp.Query.RDFModifier)">
            <summary>
            Performs the equality comparison between two modifiers
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFModifier.ApplyModifier(System.Data.DataTable)">
            <summary>
            Applies the modifier on the given datatable 
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFModifier.ModifierID">
            <summary>
            Unique representation of the modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLimitModifier.#ctor(System.Int32)">
            <summary>
            Default-ctor to build a Limit modifier on a query 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLimitModifier.ToString">
            <summary>
            Gives the string representation of the modifier 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLimitModifier.ApplyModifier(System.Data.DataTable)">
            <summary>
            Applies the modifier on the given datatable 
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFLimitModifier.Limit">
            <summary>
            Maximum number of results taken from the query
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFResource">
            <summary>
            RDFResource represents a generic resource in the RDF model.
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFPatternMember">
            <summary>
            RDFPatternMember defines an object which can be member of a pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternMember.ToString">
            <summary>
            Gives the string representation of the pattern member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternMember.Equals(RDFSharp.Query.RDFPatternMember)">
            <summary>
            Performs the equality comparison between two pattern members
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternMember.PatternMemberID">
            <summary>
            Unique representation of the pattern member
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFResource.#ctor">
            <summary>
            Empty-ctor to build a blank resource
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFResource.#ctor(System.String)">
            <summary>
            String-based ctor to build a non-blank resource;
            When given string starts with "bnode:" it builds a blank resource 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFResource.#ctor(System.Uri)">
            <summary>
            Uri-based ctor to build a non-blank resource;
            When given Uri starts with "bnode:" it builds a blank resource
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFResource.ToString">
            <summary>
            Gives the string representation of the resource
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFResource.URI">
            <summary>
            Uri of the resource
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFResource.IsBlank">
            <summary>
            Flag indicating the resource is blank or not
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFBooleanAndFilter">
            <summary>
            RDFBooleanAndFilter represents a filter applying an "AND" on the logics of the given filters.
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFFilter">
            <summary>
            RDFFilter represents a filter to be applied on a query results table.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFFilter.Equals(RDFSharp.Query.RDFFilter)">
            <summary>
            Performs the equality comparison between two filters
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the given datarow 
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFFilter.FilterID">
            <summary>
            Unique representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanAndFilter.#ctor(RDFSharp.Query.RDFFilter,RDFSharp.Query.RDFFilter)">
            <summary>
            Default-ctor to build an "AND" filter on the given filters
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanAndFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanAndFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the given datarow
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBooleanAndFilter.LeftFilter">
            <summary>
            Left Filter
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBooleanAndFilter.RightFilter">
            <summary>
            Right Filter
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums">
            <summary>
            RDFQueryEnums represents a collector for all the enumerations used by the "RDFSharp.Query" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums.RDFPatternHoles">
            <summary>
            RDFPatternHoles represents an enumeration for possible positions of holes in a pattern.
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums.RDFOrderByFlavors">
            <summary>
            RDFOrderByFlavors represents an enumeration for possible directions of query results ordering on a given variable.
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors">
            <summary>
            RDFComparisonFlavors represents an enumeration for possible comparison modes between two patten members.
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFXml">
            <summary>
            RDFXml is responsible for managing serialization to and from Xml data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.Serialize(RDFSharp.Model.RDFGraph,System.String)">
            <summary>
            Serializes the given graph to the given filepath using Xml data format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.Deserialize(System.String)">
            <summary>
            Deserializes the given Xml filepath to a graph. 
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreUtilities">
            <summary>
            RDFStoreUtilities is a collector of reusable utility methods for RDF store management
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreUtilities.ParseQuadruple(System.Data.IDataReader)">
            <summary>
            Parses the current quadruple of the data reader 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreUtilities.SelectQuadruples(RDFSharp.Store.RDFMemoryStore,RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Selects the quadruples corresponding to the given pattern from the given store
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFDescribeQueryResult">
            <summary>
            RDFDescribeQueryResult is a container for SPARQL "DESCRIBE" query results.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryResult.#ctor(System.String)">
            <summary>
            Default-ctor to build an empty DESCRIBE result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryResult.ToRDFGraph">
            <summary>
            Builds a graph corresponding to the query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryResult.FromRDFGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Builds a query result corresponding to the given graph
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQueryResult.DescribeResults">
            <summary>
            Tabular response of the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQueryResult.DescribeResultsCount">
            <summary>
            Gets the number of results produced by the query
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFLangMatchesFilter">
            <summary>
            RDFLangMatchesFilter represents a filter on the language of a variable.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLangMatchesFilter.#ctor(RDFSharp.Query.RDFVariable,System.String)">
            <summary>
            Default-ctor to build a filter on the given variable for the given language 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLangMatchesFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLangMatchesFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow 
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFLangMatchesFilter.Variable">
            <summary>
            Variable to be filtered
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFLangMatchesFilter.Language">
            <summary>
            Language to be filtered
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFBooleanOrFilter">
            <summary>
            RDFBooleanOrFilter represents a filter applying an "OR" on the logics of the given filters.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanOrFilter.#ctor(RDFSharp.Query.RDFFilter,RDFSharp.Query.RDFFilter)">
            <summary>
            Default-ctor to build an "OR" filter on the given filters
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanOrFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanOrFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the given datarow
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBooleanOrFilter.LeftFilter">
            <summary>
            Left Filter
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBooleanOrFilter.RightFilter">
            <summary>
            Right Filter
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFBooleanNotFilter">
            <summary>
            RDFBooleanNotFilter represents a filter applying a negation on the logics of the given filter.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanNotFilter.#ctor(RDFSharp.Query.RDFFilter)">
            <summary>
            Default-ctor to build a negation filter on the given filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanNotFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanNotFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the given datarow
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBooleanNotFilter.Filter">
            <summary>
            Filter to be negated
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFPlainLiteral">
            <summary>
            RDFPlainLiteral represents a RDFLiteral which can be denoted by a Language.
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFLiteral">
            <summary>
            RDFLiteral represents a generic literal in the RDF model.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFLiteral.ToString">
            <summary>
            Gives the string representation of the literal
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFLiteral.Value">
            <summary>
            Value of the literal
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPlainLiteral.#ctor(System.String)">
            <summary>
            Default-ctor to build a plain literal without language
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPlainLiteral.#ctor(System.String,System.String)">
            <summary>
            Default-ctor to build a plain literal with language
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPlainLiteral.ToString">
            <summary>
            Gives the string representation of the plain literal
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFPlainLiteral.Language">
            <summary>
            Optional language of the plain literal
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFFederation">
            <summary>
            RDFFederation represents a virtual store giving logically integrated access to multiple stores.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFFederation.#ctor">
            <summary>
            Default ctor to build an empty federation
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFFederation.#ctor(System.Collections.Generic.List{RDFSharp.Store.RDFStore})">
            <summary>
            List-based ctor to build a federation with the given list of stores
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFFederation.ToString">
            <summary>
            Gives the string representation of the federation
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFFederation.Equals(RDFSharp.Store.RDFFederation)">
            <summary>
            Performs the equality comparison between two federations
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFFederation.System#Collections#Generic#IEnumerable{RDFSharp#Store#RDFStore}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the federation'stores
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFFederation.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the federation'stores
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFFederation.AddStore(RDFSharp.Store.RDFStore)">
            <summary>
            Adds the store to the federation, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFFederation.RemoveStore(RDFSharp.Store.RDFStore)">
            <summary>
            Removes the store from the federation 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFFederation.ClearStores">
            <summary>
            Clears the stores of the federation.
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFFederation.FederationName">
            <summary>
            Name of the federation
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFFederation.StoresCount">
            <summary>
            Count of the federation' stores
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFFederation.StoresEnumerator">
            <summary>
            Gets the enumerator on the federation' stores for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFFederation.Stores">
            <summary>
            List of stores embedded into the federation
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFNQuads">
            <summary>
            RDFNQuads is responsible for managing serialization to and from N-Quads data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFNQuads.Serialize(RDFSharp.Store.RDFStore,System.String)">
            <summary>
            Serializes the given store to the given filepath using N-Quads data format. 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFDescribeQueryEngine">
            <summary>
            RDFDescribeQueryEngine is the MIRELLA SPARQL query subengine for construction and execution of "DESCRIBE" queries
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryEngine.EvaluatePatterns(RDFSharp.Query.RDFDescribeQuery,RDFSharp.Query.RDFPatternGroup,System.Object)">
            <summary>
            Get the intermediate result tables of the given pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryEngine.ApplyFilters(RDFSharp.Query.RDFDescribeQuery,RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Apply the filters of the given pattern group to its result table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryEngine.ApplyModifiers(RDFSharp.Query.RDFDescribeQuery,System.Data.DataTable)">
            <summary>
            Apply the query modifiers to the query result table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryEngine.CombinePatterns(RDFSharp.Query.RDFDescribeQuery,RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Get the result table of the given pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryEngine.DescribeTerms(RDFSharp.Query.RDFDescribeQuery,System.Object,System.Data.DataTable)">
            <summary>
            Describes the terms of the given query with data from the given result table
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFDescribeQuery">
            <summary>
            RDFDescribeQuery is the SPARQL "DESCRIBE" query implementation.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.#ctor">
            <summary>
            Default-ctor to build an empty DESCRIBE query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ToString">
            <summary>
            Gives the string representation of the DESCRIBE query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddDescribeTerm(RDFSharp.Model.RDFResource)">
            <summary>
            Adds the given resource to the describe terms of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddDescribeTerm(RDFSharp.Query.RDFVariable)">
            <summary>
            Adds the given variable to the describe terms of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddPatternGroup(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Adds the given pattern group to the body of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddModifier(RDFSharp.Query.RDFLimitModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddModifier(RDFSharp.Query.RDFOffsetModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ApplyToGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Applies the query to the given graph 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ApplyToStore(RDFSharp.Store.RDFStore)">
            <summary>
            Applies the query to the given store 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ApplyToFederation(RDFSharp.Store.RDFFederation)">
            <summary>
            Applies the query to the given federation
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQuery.DescribeTerms">
            <summary>
            List of RDF terms to be described by the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQuery.PatternGroups">
            <summary>
            List of body pattern groups carried by the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQuery.PatternResultTables">
            <summary>
            Dictionary of pattern result tables
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQuery.PatternGroupResultTables">
            <summary>
            Dictionary of pattern group result tables
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQuery.Variables">
            <summary>
            List of variables carried by the template patterns of the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQuery.Modifiers">
            <summary>
            List of modifiers carried by the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQuery.IsStar">
            <summary>
            Checks if the query is a "DESCRIBE *" query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQuery.IsEmpty">
            <summary>
            Checks if the query is empty, so contains no pattern groups
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFDistinctModifier">
            <summary>
            RDFDistinctModifier is a modifier which drops duplicate rows for the level of detail of a SELECT query. 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDistinctModifier.#ctor">
            <summary>
            Default-ctor to build a Distinct modifier on a query 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDistinctModifier.ToString">
            <summary>
            Gives the string representation of the modifier 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDistinctModifier.ApplyModifier(System.Data.DataTable)">
            <summary>
            Applies the modifier on the given datatable 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFIsBlankFilter">
            <summary>
            RDFIsBlankFilter represents a filter for Blank Uri values of a variable.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsBlankFilter.#ctor(RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a filter on the given variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsBlankFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsBlankFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFIsBlankFilter.Variable">
            <summary>
            Variable to be filtered
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFGraphIndex">
            <summary>
            RDFGraphIndex represents an automatically managed in-memory index structure for the triples of a graph.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.#ctor">
            <summary>
            Default-ctor for an empty graph index
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.AddIndex(RDFSharp.Model.RDFTriple)">
            <summary>
            Adds the given triple to the SPOL index
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.RemoveIndex(RDFSharp.Model.RDFTriple)">
            <summary>
            Removes the given triple from the SPOL index
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.ClearIndex">
            <summary>
            Clears the index
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.SelectIndexBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the triples indexed by the given subject
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.SelectIndexByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the triples indexed by the given predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.SelectIndexByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the triples indexed by the given object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.SelectIndexByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Selects the triples indexed by the given literal
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraphIndex.Subjects">
            <summary>
            Index on the subjects of the graph's triples
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraphIndex.Predicates">
            <summary>
            Index on the predicates of the graph's triples
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraphIndex.Objects">
            <summary>
            Index on the objects of the graph's triples
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraphIndex.Literals">
            <summary>
            Index on the literals of the graph's triples
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreException">
            <summary>
            RDFStoreException represents an exception thrown during manipulation of RDF data stores.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreException.#ctor">
            <summary>
            Basic ctor to throw an empty RDFStoreException
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreException.#ctor(System.String)">
            <summary>
            Basic ctor to throw an RDFStoreException with message
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreException.#ctor(System.String,System.Exception)">
            <summary>
            Basic ctor to throw an RDFStoreException with message and inner exception
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Basic ctor to support serialization of a remotely thrown RDFStoreException
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFConstructQueryResult">
            <summary>
            RDFConstructQueryResult is a container for SPARQL "CONSTRUCT" query results.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQueryResult.#ctor(System.String)">
            <summary>
            Default-ctor to build an empty CONSTRUCT result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQueryResult.ToRDFGraph">
            <summary>
            Builds a graph corresponding to the query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQueryResult.FromRDFGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Builds a query result corresponding to the given graph
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFConstructQueryResult.ConstructResults">
            <summary>
            Tabular response of the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFConstructQueryResult.ConstructResultsCount">
            <summary>
            Gets the number of results produced by the query
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEvents">
            <summary>
            RDFQueryEvents represents a collector for all the events generated within the "RDFSharp.Query" namespace
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEvents.RaiseQueryInfo(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEvents.RaiseQueryWarning(System.String)">
            <summary>
            Internal invoker of the subscribed warning event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Query.RDFQueryEvents.OnQueryInfo">
            <summary>
            Event representing an information message generated within the "RDFSharp.Query" namespace
            </summary>
        </member>
        <member name="E:RDFSharp.Query.RDFQueryEvents.OnQueryWarning">
            <summary>
            Event representing a warning message generated within the "RDFSharp.Query" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEvents.RDFQueryInfoEventHandler">
            <summary>
            Delegate to handle information events generated within the "RDFSharp.Query" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEvents.RDFQueryWarningEventHandler">
            <summary>
            Delegate to handle warning events generated within the "RDFSharp.Query" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEngine">
            <summary>
            RDFQueryEngine is the MIRELLA SPARQL engine for construction and execution of SPARQL queries.
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEngine.dtComparer">
            <summary>
            Static instance of the comparer used by the engine to compare data columns
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.InnerJoinTables(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Joins two datatables WITHOUT support for OPTIONAL data
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.OuterJoinTables(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Joins two datatables WITH support for OPTIONAL data
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.CombineTables(System.Collections.Generic.List{System.Data.DataTable},System.Boolean)">
            <summary>
            Merges / Joins / Products the given list of data tables, based on presence of common columns and dynamic detection of Optional / Union operators
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.ApplyPattern(RDFSharp.Query.RDFPattern,RDFSharp.Model.RDFGraph)">
            <summary>
            Applies the given pattern to the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.ApplyPattern(RDFSharp.Query.RDFPattern,RDFSharp.Store.RDFStore)">
            <summary>
            Applies the given pattern to the given store
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.PopulateTable(RDFSharp.Query.RDFPattern,System.Collections.Generic.List{RDFSharp.Model.RDFTriple},RDFSharp.Query.RDFQueryEnums.RDFPatternHoles,System.Data.DataTable)">
            <summary>
            Builds the table results of the pattern with values from the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.PopulateTable(RDFSharp.Query.RDFPattern,RDFSharp.Store.RDFMemoryStore,RDFSharp.Query.RDFQueryEnums.RDFPatternHoles,System.Data.DataTable)">
            <summary>
            Builds the table results of the pattern with values from the given store
            </summary>
        </member>
        <member name="T:RDFSharp.Query.DataColumnComparer">
            <summary>
            Utility class for comparison between datacolumns
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFNTriples">
            <summary>
            RDFNTriples is responsible for managing serialization to and from N-Triples data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNTriples.Serialize(RDFSharp.Model.RDFGraph,System.String)">
            <summary>
            Serializes the given graph to the given filepath using N-Triples data format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNTriples.Deserialize(System.String)">
            <summary>
            Deserializes the given N-Triples filepath to a graph. 
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFQuadruple">
            <summary>
            RDFQuadruple represents a quadruple in the RDF store.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFQuadruple.#ctor(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            SPO-flavor ctor
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFQuadruple.#ctor(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            SPL-flavor ctor
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFQuadruple.ToString">
            <summary>
            Gives the string representation of the quadruple
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFQuadruple.Equals(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Performs the equality comparison between two quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFQuadruple.ReifyQuadruple">
            <summary>
            Builds the reification store of the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.QuadrupleID">
            <summary>
            Unique representation of the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.TripleFlavor">
            <summary>
            Flavor of the triple nested into the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.Context">
            <summary>
            Member acting as context token of the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.Subject">
            <summary>
            Member acting as subject token of the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.Predicate">
            <summary>
            Member acting as predicate token of the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.Object">
            <summary>
            Member acting as object token of the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.ReificationSubject">
            <summary>
            Subject of the quadruple's reification
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFConstructQueryEngine">
            <summary>
            RDFConstructQueryEngine is the MIRELLA SPARQL query subengine for construction and execution of "CONSTRUCT" queries
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQueryEngine.EvaluatePatterns(RDFSharp.Query.RDFConstructQuery,RDFSharp.Query.RDFPatternGroup,System.Object)">
            <summary>
            Get the intermediate result tables of the given pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQueryEngine.ApplyFilters(RDFSharp.Query.RDFConstructQuery,RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Apply the filters of the given pattern group to its result table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQueryEngine.ApplyModifiers(RDFSharp.Query.RDFConstructQuery,System.Data.DataTable)">
            <summary>
            Apply the query modifiers to the query result table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQueryEngine.CombinePatterns(RDFSharp.Query.RDFConstructQuery,RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Get the result table of the given pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQueryEngine.FillTemplates(RDFSharp.Query.RDFConstructQuery,System.Data.DataTable)">
            <summary>
            Fills the templates of the given query with data from the given result table
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFPatternGroup">
            <summary>
            RDFPatternGroup represents a named group of patterns having its own filters.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.#ctor(System.String)">
            <summary>
            Default-ctor to build an empty named pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.#ctor(System.String,System.Collections.Generic.List{RDFSharp.Query.RDFPattern})">
            <summary>
            List-ctor to build a named pattern group from a list of patterns 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.#ctor(System.String,System.Collections.Generic.List{RDFSharp.Query.RDFPattern},System.Collections.Generic.List{RDFSharp.Query.RDFFilter})">
            <summary>
            List-ctor to build a named pattern group from a list of patterns and a list of filters
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.ToString">
            <summary>
            Gives the string representation of the patternGroup
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.Equals(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Performs the equality comparison between two pattern groups
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.AddPattern(RDFSharp.Query.RDFPattern)">
            <summary>
            Adds the given pattern to the pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.AddFilter(RDFSharp.Query.RDFFilter)">
            <summary>
            Adds the given filter to the pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.Optional">
            <summary>
            Sets the pattern group as Optional
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.UnionWithNext">
            <summary>
            Sets the pattern group to be joined as Union with the next pattern group encountered in the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroup.PatternGroupID">
            <summary>
            Unique representation of the pattern group
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroup.PatternGroupName">
            <summary>
            Name of the pattern group, which must be unique in a query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroup.IsOptional">
            <summary>
            Flag indicating the pattern group to be joined as Optional
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroup.JoinAsUnion">
            <summary>
            Flag indicating the pattern group to be joined as Union
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroup.Patterns">
            <summary>
            List of patterns carried by the pattern group
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroup.Filters">
            <summary>
            List of filters carried by the pattern group
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroup.Variables">
            <summary>
            List of variables carried by the patterns of the pattern group
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelUtilities">
            <summary>
            RDFModelUtilities is a collector of reusable utility methods for RDF model management
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.CreateHash(System.String)">
            <summary>
            Performs MD5 hash calculation of the given string
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetUriFromString(System.String)">
            <summary>
            Gets the Uri corresponding to the given string
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GenerateAnonUri">
            <summary>
            Generates a new Uri for a blank resource.
            It starts by default with "bnode:", because it doesn't have to be dependant on namespaces.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.RebuildGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Rebuild the metadata of the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.SelectTriples(RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Selects the triples corresponding to the given pattern from the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.AbbreviateNamespace(System.String)">
            <summary>
            Finds if the given token contains a recognizable namespace and, if so, abbreviates it with its prefix.
            It also prepares the result in a format useful for RDFSerialization.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GenerateNamespace(System.String,System.Boolean)">
            <summary>
            Generates an automatic prefix for a namespace
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetDatatypeFromString(System.String)">
            <summary>
            Tries to parse the given string in order to build the corresponding datatype
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.ValidateTypedLiteral(RDFSharp.Model.RDFTypedLiteral)">
            <summary>
            Validates the value of the given typed literal against the category of its datatype
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelUtilities.regexU8">
            <summary>
            Regex to catch 8-byte unicodes in N-Triples
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelUtilities.regexU4">
            <summary>
            Regex to catch 4-byte unicodes in N-Triples
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelUtilities.regexNT">
            <summary>
            Regex to parse N-Triples focusing on predicate position 
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelUtilities.regexLPL">
            <summary>
            Regex to detect presence of a plain literal with language tag within a given N-Triple
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelUtilities.regexSqt">
            <summary>
            Regex to detect presence of starting " in the value of a given N-Triple literal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelUtilities.regexEqt">
            <summary>
            Regex to detect presence of ending " in the value of a given N-Triple literal
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.ParseNTriple(System.String)">
            <summary>
            Tries to parse the given N-Triple
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.ASCII_To_Unicode(System.String)">
            <summary>
            Turns back ASCII-encoded Unicodes into Unicodes. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.Unicode_To_ASCII(System.String)">
            <summary>
            Turns Unicodes into ASCII-encoded Unicodes. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetRdfRootNode(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
            Gives the "rdf:RDF" root node of the document
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetXmlnsNamespaces(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Gives the collection of "xmlns" attributes of the "rdf:RDF" root node
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetSubjectNode(System.Xml.XmlNode,System.Uri,RDFSharp.Model.RDFGraph)">
            <summary>
            Gives the subj node extracted from the attribute list of the current element 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.ResolveRelativeNode(System.Xml.XmlAttribute,System.Uri)">
            <summary>
            Checks if the given attribute is absolute Uri, relative Uri, "rdf:ID" relative Uri, "rdf:nodeID" blank node Uri
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.CheckIfRdfDescriptionNode(System.Xml.XmlNode)">
            <summary>
            Verify if we are on a standard rdf:Description element
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetRdfAboutAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF subj
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetRdfResourceAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetRdfDatatypeAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF typed literal datatype
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetXmlLangAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF plain literal language
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetParseTypeCollectionAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF parseType "Collection"
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetParseTypeLiteralAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF parseType "Literal"
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.ParseCollectionElements(System.Uri,System.Xml.XmlNode,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFGraph)">
            <summary>
            Given an attribute representing a RDF collection, iterates on its constituent elements
            to build its standard reification triples. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.ReconstructCollection(RDFSharp.Model.RDFGraphMetadata,RDFSharp.Model.RDFResource,System.Xml.XmlDocument)">
            <summary>
            Given the metadata of a graph and a collection resource, it reconstructs the RDF collection and returns it as a list of nodes
            This is needed for building the " rdf:parseType=Collection>" RDF/XML abbreviation goody for collections of resources
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.CheckIfRdfContainerNode(System.Xml.XmlNode)">
            <summary>
            Verify if we are on a standard rdf:[Bag|Seq|Alt] element
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetContainerNode(System.Xml.XmlNode)">
            <summary>
            Given an element, return the child element which can correspond to the RDF container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.ParseContainerElements(RDFSharp.Model.RDFModelEnums.RDFContainerTypes,System.Xml.XmlNode,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFGraph)">
            <summary>
            Given an element representing a RDF container, iterates on its constituent elements
            to build its standard reification triples. 
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelUtilities.regexTTL">
            <summary>
            Regex to catch literals which must be escaped as long literals in Turtle
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFContainer">
            <summary>
            RDFContainer represents a generic container in the RDF model.
            It is made up of items, which must be all resources or all literals.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.#ctor(RDFSharp.Model.RDFModelEnums.RDFContainerTypes,RDFSharp.Model.RDFModelEnums.RDFItemTypes)">
            <summary>
            Default ctor to build an empty container of the given flavor and given type
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.#ctor(RDFSharp.Model.RDFModelEnums.RDFContainerTypes,RDFSharp.Model.RDFModelEnums.RDFItemTypes,System.Collections.ArrayList)">
            <summary>
            List-based ctor to build a container of the given flavor and given type with given items
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the container's items
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.AddItem(System.Object)">
            <summary>
            Adds the given item to the container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.RemoveItem(System.Object)">
            <summary>
            Removes the given item from the container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.ClearItems">
            <summary>
            Removes all the items from the container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.ReifyContainer">
            <summary>
            Builds the reification graph of the container:
            Subject -> rdf:type -> [rdf:Bag|rdf:Seq|rdf:Alt] 
            Subject -> rdf:_N   -> RDFContainer.ITEM(N)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.ContainerType">
            <summary>
            Type of the container
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.ItemType">
            <summary>
            Type of the items of the container
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.ReificationSubject">
            <summary>
            Subject of the container's reification
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.ItemsCount">
            <summary>
            Count of the container's items
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.ItemsEnumerator">
            <summary>
            Gets the enumerator on the container's items for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.Items">
            <summary>
            List of the items contained in the container
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreIndex">
            <summary>
            RDFStoreIndex represents an automatically managed in-memory index structure for the quadruples of a store.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.#ctor">
            <summary>
            Default-ctor for an empty store index
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.AddIndex(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Adds the given quadruple to the CSPOL index
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.RemoveIndex(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Removes the given quadruple from the CSPOL index
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.ClearIndex">
            <summary>
            Clears the index
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.SelectIndexByContext(RDFSharp.Store.RDFContext)">
            <summary>
            Selects the quadruples indexed by the given context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.SelectIndexBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the quadruples indexed by the given subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.SelectIndexByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the quadruples indexed by the given predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.SelectIndexByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the quadruples indexed by the given object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.SelectIndexByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Selects the quadruples indexed by the given literal
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStoreIndex.Contexts">
            <summary>
            Index on the contexts of the store's quadruples
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStoreIndex.Subjects">
            <summary>
            Index on the subjects of the store's quadruples
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStoreIndex.Predicates">
            <summary>
            Index on the predicates of the store's quadruples
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStoreIndex.Objects">
            <summary>
            Index on the objects of the store's quadruples
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStoreIndex.Literals">
            <summary>
            Index on the literals of the store's quadruples
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFIsUriFilter">
            <summary>
            RDFIsUriFilter represents a filter for Uri values of a variable.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsUriFilter.#ctor(RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a filter on the given variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsUriFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsUriFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFIsUriFilter.Variable">
            <summary>
            Variable to be filtered
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFComparisonFilter">
            <summary>
            RDFComparisonFilter represents a filter applying a comparison between the given RDF terms.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFComparisonFilter.#ctor(RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors,RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Default-ctor to build a comparison filter of the given type on the given filters
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFComparisonFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFComparisonFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the given datarow
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFComparisonFilter.ComparisonFlavor">
            <summary>
            Comparison to be applied between the given pattern members
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFComparisonFilter.LeftMember">
            <summary>
            Left Pattern Member
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFComparisonFilter.RightMember">
            <summary>
            Right Pattern Member
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTrix">
            <summary>
            RDFTrix is responsible for managing serialization to and from TriX data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTrix.Serialize(RDFSharp.Model.RDFGraph,System.String)">
            <summary>
            Serializes the given graph to the given filepath using TriX data format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTrix.Deserialize(System.String)">
            <summary>
            Deserializes the given TriX filepath to a graph. 
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTurtle">
            <summary>
            RDFTurtle is responsible for managing serialization to Turtle data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.Serialize(RDFSharp.Model.RDFGraph,System.String)">
            <summary>
            Serializes the given graph to the given filepath using Turtle data format. 
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTriple">
            <summary>
            RDFTriple represents a triple in the RDF model.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriple.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            SPO-flavor ctor
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriple.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            SPL-flavor ctor
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriple.ToString">
            <summary>
            Gives the string representation of the triple
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriple.Equals(RDFSharp.Model.RDFTriple)">
            <summary>
            Performs the equality comparison between two triples
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriple.ReifyTriple">
            <summary>
            Builds the reification graph of the triple
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.TripleID">
            <summary>
            Unique representation of the triple
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.TripleFlavor">
            <summary>
            Flavor of the triple
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.Subject">
            <summary>
            Member acting as subject token of the triple
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.Predicate">
            <summary>
            Member acting as predicate token of the triple
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.Object">
            <summary>
            Member acting as object token of the triple
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.ReificationSubject">
            <summary>
            Subject of the triple's reification
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFDatatype">
            <summary>
            RDFDatatype represents a generic datatype in the RDF model.
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFNamespace">
            <summary>
            RDFNamespace represents a generic namespace in the RDF model.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespace.#ctor(System.String,System.String)">
            <summary>
            String-based ctor to build a namespace with prefix and uri
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespace.#ctor(System.String,System.Uri)">
            <summary>
            Uri-based ctor to build a namespace with prefix and uri
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespace.ToString">
            <summary>
            Gives the string representation of the namespace
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespace.Equals(RDFSharp.Model.RDFNamespace)">
            <summary>
            Performs the equality comparison between two namespaces
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespace.NamespaceID">
            <summary>
            Unique representation of the namespace
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespace.Prefix">
            <summary>
            Prefix abbreviation of the namespace
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespace.Namespace">
            <summary>
            Full-Uri representation of the namespace
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDatatype.#ctor(System.String,System.String,System.String,RDFSharp.Model.RDFModelEnums.RDFDatatypeCategory)">
            <summary>
            String-based ctor to build a datatype of the given category
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDatatype.#ctor(System.String,System.Uri,System.String,RDFSharp.Model.RDFModelEnums.RDFDatatypeCategory)">
            <summary>
            Uri-based ctor to build a datatype of the given category
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDatatype.ToString">
            <summary>
            Gives the string representation of the datatype
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDatatype.Equals(RDFSharp.Model.RDFDatatype)">
            <summary>
            Performs the equality comparison between two datatypes
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFDatatype.DatatypeID">
            <summary>
            Unique representation of the datatype
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFDatatype.Datatype">
            <summary>
            String representing the type of data
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFDatatype.Category">
            <summary>
            Category of the datatype
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSameTermFilter">
            <summary>
            RDFSameTermFilter represents an equality filter between a variable and a RDF term.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSameTermFilter.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Default-ctor to build an equality filter between the given variable and the given RDF term 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSameTermFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSameTermFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSameTermFilter.Variable">
            <summary>
            Variable to be filtered
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSameTermFilter.RDFTerm">
            <summary>
            RDF Term to be filtered (can be a RDFResource, a RDFLiteral or a RDFVariable)
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelException">
            <summary>
            RDFModelException represents an exception thrown during manipulation of RDF data models.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelException.#ctor">
            <summary>
            Basic ctor to throw an empty RDFModelException
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelException.#ctor(System.String)">
            <summary>
            Basic ctor to throw an RDFModelException with message
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelException.#ctor(System.String,System.Exception)">
            <summary>
            Basic ctor to throw an RDFModelException with message and inner exception
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Basic ctor to support serialization of a remotely thrown RDFModelException
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFBoundFilter">
            <summary>
            RDFBoundFilter represents a filter checking if a variable is bound to a value.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBoundFilter.#ctor(RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a filter on the given variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBoundFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBoundFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow 
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBoundFilter.Variable">
            <summary>
            Variable to be filtered
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFVariable">
            <summary>
            RDFVariable represents a named "hole" in a pattern, to be filled with values during queries.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFVariable.#ctor(System.String,System.Boolean)">
            <summary>
            Default-ctor to build a named SPARQL variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFVariable.ToString">
            <summary>
            Gives the string representation of the variable
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFVariable.VariableName">
            <summary>
            Name of the variable
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFVariable.IsResult">
            <summary>
            Flag to indicate the variable must be shown in the query results
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEvents">
            <summary>
            RDFStoreEvents represents a collector for all the events generated within the "RDFSharp.Store" namespace
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreEvents.RaiseStoreInfo(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreEvents.RaiseStoreWarning(System.String)">
            <summary>
            Internal invoker of the subscribed warning event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Store.RDFStoreEvents.OnStoreInfo">
            <summary>
            Event representing an information message generated within the "RDFSharp.Store" namespace
            </summary>
        </member>
        <member name="E:RDFSharp.Store.RDFStoreEvents.OnStoreWarning">
            <summary>
            Event representing a warning message generated within the "RDFSharp.Store" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEvents.RDFStoreInfoEventHandler">
            <summary>
            Delegate to handle information events generated within the "RDFSharp.Store" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEvents.RDFStoreWarningEventHandler">
            <summary>
            Delegate to handle warning events generated within the "RDFSharp.Store" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSelectQueryResult">
            <summary>
            RDFSelectQueryResult is a container for SPARQL "SELECT" query results.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryResult.#ctor(System.String)">
            <summary>
            Default-ctor to build an empty SELECT result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryResult.ToSparqlXmlResult(System.String)">
            <summary>
            Writes the "SPARQL Query Results XML Format" file corresponding to the query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryResult.FromSparqlXmlResult(System.String)">
            <summary>
            Reads the given "SPARQL Query Results XML Format" file into a query result
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSelectQueryResult.SelectResults">
            <summary>
            Tabular response of the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSelectQueryResult.SelectResultsCount">
            <summary>
            Gets the number of results produced by the query
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFAskQueryResult">
            <summary>
            RDFAskResult is a container for SPARQL "ASK" query results.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryResult.#ctor">
            <summary>
            Default-ctor to build an empty ASK result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryResult.ToSparqlXmlResult(System.String)">
            <summary>
            Gives the "SPARQL Query Results XML Format" representation of the RDF query result into the given XML file
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryResult.FromSparqlXmlResult(System.String)">
            <summary>
            Reads the given "SPARQL Query Results XML Format" file into a query result
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAskQueryResult.AskResult">
            <summary>
            Boolean response of the ASK query
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFIsNumericFilter">
            <summary>
            RDFIsNumericFilter represents a filter for literal numeric values of a variable.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsNumericFilter.#ctor(RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a filter on the given variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsNumericFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsNumericFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFIsNumericFilter.Variable">
            <summary>
            Variable to be filtered
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFDatatypeFilter">
            <summary>
            RDFDatatypeFilter represents a filter on the datatype of a variable.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDatatypeFilter.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Model.RDFDatatype)">
            <summary>
            Default-ctor to build a filter on the given variable for the given datatype 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDatatypeFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDatatypeFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow 
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDatatypeFilter.Variable">
            <summary>
            Variable to be filtered
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDatatypeFilter.Datatype">
            <summary>
            Datatype to be filtered
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryUtilities">
            <summary>
            RDFQueryUtilities is a collector of reusable utility methods for RDF query management
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryUtilities.AddColumn(System.Data.DataTable,System.String)">
            <summary>
            Adds a new column to the given table, avoiding duplicates 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryUtilities.AddRow(System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds a new row to the given table 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryUtilities.ParseRDFPatternMember(System.String)">
            <summary>
            Parses the given string to return an instance of pattern member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryUtilities.CompareRDFPatternMembers(RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Compares the given pattern members, throwing a "Type Error" whenever the comparison operator detects sematically incompatible members;
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryUtilities.PrintRDFPatternMember(RDFSharp.Query.RDFPatternMember)">
            <summary>
            Gives a formatted string representation of the given pattern member
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFDatatypeRegister">
            <summary>
            RDFDatatypeRegister is a singleton container for registered RDF datatypes.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDatatypeRegister.#cctor">
            <summary>
            Default-ctor to initialize the singleton instance of the register
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDatatypeRegister.System#Collections#Generic#IEnumerable{RDFSharp#Model#RDFDatatype}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the register's datatypes
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDatatypeRegister.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the register's datatypes
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDatatypeRegister.AddDatatype(RDFSharp.Model.RDFDatatype)">
            <summary>
            Adds the given datatype to the register. It also adds its namespace to the namespace register.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDatatypeRegister.RemoveDatatype(RDFSharp.Model.RDFDatatype)">
            <summary>
            Removes the given datatype from the register
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDatatypeRegister.ContainsDatatype(RDFSharp.Model.RDFDatatype)">
            <summary>
            Checks for existence of the given datatype in the register by seeking presence of its prefix or its uri and its datatype
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDatatypeRegister.GetByNamespaceAndDatatype(System.String,System.String)">
            <summary>
            Retrieves a datatype from the register by seeking presence of its namespace and datatype
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDatatypeRegister.GetByPrefixAndDatatype(System.String,System.String)">
            <summary>
            Retrieves a datatype from the register by seeking presence of its prefix and datatype
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFDatatypeRegister.Instance">
            <summary>
            Singleton instance of the RDFDatatypeRegister class
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFDatatypeRegister.Register">
            <summary>
            List of registered datatypes
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFDatatypeRegister.DatatypesCount">
            <summary>
            Count of the register's datatypes
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFDatatypeRegister.DatatypesEnumerator">
            <summary>
            Gets the enumerator on the register's datatypes for iteration
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEnums">
            <summary>
            RDFStoreEnums represents a collector for all the enumerations used by the "RDFSharp.Store" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEnums.RDFStoreSQLErrors">
            <summary>
            RDFStoreSQLErrors represents an enumeration for situations which can be found on a SQL-backing store
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEnums.RDFFormats">
            <summary>
            RDFFormats represents an enumeration for supported RDF store serialization data formats.
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSelectQueryEngine">
            <summary>
            RDFSelectQueryEngine is the MIRELLA SPARQL query subengine for construction and execution of "SELECT" queries
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryEngine.EvaluatePatterns(RDFSharp.Query.RDFSelectQuery,RDFSharp.Query.RDFPatternGroup,System.Object)">
            <summary>
            Get the intermediate result tables of the given pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryEngine.ApplyFilters(RDFSharp.Query.RDFSelectQuery,RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Apply the filters of the given pattern group to its result table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryEngine.ApplyModifiers(RDFSharp.Query.RDFSelectQuery,System.Data.DataTable)">
            <summary>
            Apply the query modifiers to the query result table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryEngine.CombinePatterns(RDFSharp.Query.RDFSelectQuery,RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Get the result table of the given pattern group
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFAskQueryEngine">
            <summary>
            RDFAskQueryEngine is the MIRELLA SPARQL query subengine for construction and execution of "ASK" queries
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryEngine.EvaluatePatterns(RDFSharp.Query.RDFAskQuery,RDFSharp.Query.RDFPatternGroup,System.Object)">
            <summary>
            Get the intermediate result tables of the given pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryEngine.ApplyFilters(RDFSharp.Query.RDFAskQuery,RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Apply the filters of the given pattern group to its result table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryEngine.CombinePatterns(RDFSharp.Query.RDFAskQuery,RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Get the result table of the given pattern group
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary">
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.RDF">
            <summary>
            RDF represents the RDF vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.PREFIX">
            <summary>
            rdf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.BASE_URI">
            <summary>
            xmlns:rdf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.BAG">
            <summary>
            rdf:Bag
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.SEQ">
            <summary>
            rdf:Seq
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.ALT">
            <summary>
            rdf:Alt
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.STATEMENT">
            <summary>
            rdf:Statement
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.PROPERTY">
            <summary>
            rdf:Property
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.XML_LITERAL">
            <summary>
            rdf:XMLLiteral
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.LIST">
            <summary>
            rdf:List
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.NIL">
            <summary>
            rdf:nil
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.LI">
            <summary>
            rdf:li
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.SUBJECT">
            <summary>
            rdf:subject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.PREDICATE">
            <summary>
            rdf:predicate
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.OBJECT">
            <summary>
            rdf:object
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.TYPE">
            <summary>
            rdf:type
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.VALUE">
            <summary>
            rdf:value
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.FIRST">
            <summary>
            rdf:first
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.REST">
            <summary>
            rdf:rest
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.HTML">
            <summary>
            rdf:HTML
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.RDFS">
            <summary>
            RDFS represents the RDFS vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.PREFIX">
            <summary>
            rdfs
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.BASE_URI">
            <summary>
            xmlns:rdfs
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.RESOURCE">
            <summary>
            rdfs:Resource
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.CLASS">
            <summary>
            rdfs:Class
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.LITERAL">
            <summary>
            rdfs:Literal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.CONTAINER">
            <summary>
            rdfs:Container
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.DATATYPE">
            <summary>
            rdfs:Datatype
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.CONTAINER_MEMBERSHIP_PROPERTY">
            <summary>
            rdfs:ContainerMembershipProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.RANGE">
            <summary>
            rdfs:range
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.DOMAIN">
            <summary>
            rdfs:domain
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.SUB_CLASS_OF">
            <summary>
            rdfs:subClassOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.SUB_PROPERTY_OF">
            <summary>
            rdfs:subPropertyOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.LABEL">
            <summary>
            rdfs:label
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.COMMENT">
            <summary>
            rdfs:comment
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.MEMBER">
            <summary>
            rdfs:member
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.SEE_ALSO">
            <summary>
            rdfs:seeAlso
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.IS_DEFINED_BY">
            <summary>
            rdfs:isDefinedBy
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.XSD">
            <summary>
            XSD represents the XSD vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.PREFIX">
            <summary>
            xsd
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.BASE_URI">
            <summary>
            xmlns:xsd
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.STRING">
            <summary>
            xsd:string
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.BOOLEAN">
            <summary>
            xsd:boolean
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.DECIMAL">
            <summary>
            xsd:decimal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.FLOAT">
            <summary>
            xsd:float
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.DOUBLE">
            <summary>
            xsd:double
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.POSITIVE_INTEGER">
            <summary>
            xsd:positiveInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NEGATIVE_INTEGER">
            <summary>
            xsd:negativeInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NON_POSITIVE_INTEGER">
            <summary>
            xsd:nonPositiveInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NON_NEGATIVE_INTEGER">
            <summary>
            xsd:nonNegativeInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.INTEGER">
            <summary>
            xsd:integer
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.LONG">
            <summary>
            xsd:long
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.UNSIGNED_LONG">
            <summary>
            xsd:unsignedLong
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.INT">
            <summary>
            xsd:int
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.UNSIGNED_INT">
            <summary>
            xsd:unsignedInt
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.SHORT">
            <summary>
            xsd:short
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.UNSIGNED_SHORT">
            <summary>
            xsd:unsignedShort
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.BYTE">
            <summary>
            xsd:byte
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.UNSIGNED_BYTE">
            <summary>
            xsd:unsignedByte
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.DURATION">
            <summary>
            xsd:duration
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.DATETIME">
            <summary>
            xsd:dateTime
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.TIME">
            <summary>
            xsd:time
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.DATE">
            <summary>
            xsd:date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.G_YEAR_MONTH">
            <summary>
            xsd:gYearMonth
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.G_YEAR">
            <summary>
            xsd:gYear
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.G_MONTH">
            <summary>
            xsd:gMonth
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.G_MONTH_DAY">
            <summary>
            xsd:gMonthDay
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.G_DAY">
            <summary>
            xsd:gDay
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.HEX_BINARY">
            <summary>
            xsd:hexBinary
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.BASE64_BINARY">
            <summary>
            xsd:base64Binary
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.ANY_URI">
            <summary>
            xsd:anyURI
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.QNAME">
            <summary>
            xsd:QName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NOTATION">
            <summary>
            xsd:NOTATION
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.LANGUAGE">
            <summary>
            xsd:language
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NORMALIZED_STRING">
            <summary>
            xsd:normalizedString
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.TOKEN">
            <summary>
            xsd:token
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NMTOKEN">
            <summary>
            xsd:NMToken
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NAME">
            <summary>
            xsd:Name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NCNAME">
            <summary>
            xsd:NCName
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.OWL">
            <summary>
            OWL represents the OWL vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.PREFIX">
            <summary>
            owl
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.BASE_URI">
            <summary>
            xmlns:owl
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ONTOLOGY">
            <summary>
            owl:Ontology
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.IMPORTS">
            <summary>
            owl:imports
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.CLASS">
            <summary>
            owl:Class
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.INDIVIDUAL">
            <summary>
            owl:Individual
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.THING">
            <summary>
            owl:Thing
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.NOTHING">
            <summary>
            owl:Nothing
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.RESTRICTION">
            <summary>
            owl:Restriction
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ON_PROPERTY">
            <summary>
            owl:onProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.EQUIVALENT_CLASS">
            <summary>
            owl:equivalentClass
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DEPRECATED_CLASS">
            <summary>
            owl:DeprecatedClass
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.EQUIVALENT_PROPERTY">
            <summary>
            owl:equivalentProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DEPRECATED_PROPERTY">
            <summary>
            owl:DeprecatedProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.INVERSE_OF">
            <summary>
            owl:inverseOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DATATYPE_PROPERTY">
            <summary>
            owl:DatatypeProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.OBJECT_PROPERTY">
            <summary>
            owl:ObjectProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.TRANSITIVE_PROPERTY">
            <summary>
            owl:TransitiveProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.SYMMETRIC_PROPERTY">
            <summary>
            owl:SymmetricProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.FUNCTIONAL_PROPERTY">
            <summary>
            owl:FunctionalProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.INVERSE_FUNCTIONAL_PROPERTY">
            <summary>
            owl:InverseFunctionalProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ANNOTATION_PROPERTY">
            <summary>
            owl:AnnotationProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ONTOLOGY_PROPERTY">
            <summary>
            owl:OntologyProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ALL_VALUES_FROM">
            <summary>
            owl:allValuesFrom
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.SOME_VALUES_FROM">
            <summary>
            owl:someValuesFrom
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.HAS_VALUE">
            <summary>
            owl:hasValue
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.MIN_CARDINALITY">
            <summary>
            owl:minCardinality
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.MAX_CARDINALITY">
            <summary>
            owl:maxCardinality
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.CARDINALITY">
            <summary>
            owl:cardinality
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.SAME_AS">
            <summary>
            owl:sameAs
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DIFFERENT_FROM">
            <summary>
            owl:differentFrom
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.INTERSECTION_OF">
            <summary>
            owl:intersectionOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.UNION_OF">
            <summary>
            owl:unionOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.COMPLEMENT_OF">
            <summary>
            owl:complementOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ONE_OF">
            <summary>
            owl:oneOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DATA_RANGE">
            <summary>
            owl:DataRange
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.BACKWARD_COMPATIBLE_WITH">
            <summary>
            owl:backwardCompatibleWith
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.INCOMPATIBLE_WITH">
            <summary>
            owl:incompatibleWith
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DISJOINT_WITH">
            <summary>
            owl:disjointWith
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.PRIOR_VERSION">
            <summary>
            owl:priorVersion
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.VERSION_INFO">
            <summary>
            owl:versionInfo
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.XML">
            <summary>
            XML represents the XML vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XML.PREFIX">
            <summary>
            xml
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XML.BASE_URI">
            <summary>
            xmlns:xml
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XML.LANG">
            <summary>
            xml:lang
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XML.BASE">
            <summary>
            xml:base
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.DC">
            <summary>
            DC represents the Dublin Core vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.PREFIX">
            <summary>
            dc
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.BASE_URI">
            <summary>
            xmlns:dc
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.CONTRIBUTOR">
            <summary>
            dc:contributor
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.COVERAGE">
            <summary>
            dc:coverage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.CREATOR">
            <summary>
            dc:creator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DATE">
            <summary>
            dc:date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DESCRIPTION">
            <summary>
            dc:description
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.FORMAT">
            <summary>
            dc:format
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.IDENTIFIER">
            <summary>
            dc:identifier
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.LANGUAGE">
            <summary>
            dc:language
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.PUBLISHER">
            <summary>
            dc:publisher
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.RELATION">
            <summary>
            dc:relation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.RIGHTS">
            <summary>
            dc:rights
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.SOURCE">
            <summary>
            dc:source
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.SUBJECT">
            <summary>
            dc:subject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.TITLE">
            <summary>
            dc:title
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.TYPE">
            <summary>
            dc:type
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.PREFIX">
            <summary>
            dcterms
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.BASE_URI">
            <summary>
            xmlns:dcterms
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.ABSTRACT">
            <summary>
            dcterms:abstract
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.ACCESS_RIGHTS">
            <summary>
            dcterms:accessRights
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.ACCRUAL_METHOD">
            <summary>
            dcterms:accrualMethod
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.ACCRUAL_PERIODICITY">
            <summary>
            dcterms:accrualPeriodicity
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.ACCRUAL_POLICY">
            <summary>
            dcterms:accrualPolicy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.AGENT">
            <summary>
            dcterms:Agent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.AGENT_CLASS">
            <summary>
            dcterms:AgentClass
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.ALTERNATIVE">
            <summary>
            dcterms:alternative
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.AUDIENCE">
            <summary>
            dcterms:audience
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.AVAILABLE">
            <summary>
            dcterms:available
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.BIBLIOGRAPHIC_CITATION">
            <summary>
            dcterms:bibliographicCitation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.BIBLIOGRAPHIC_RESOURCE">
            <summary>
            dcterms:bibliographicResource
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.CONFORMS_TO">
            <summary>
            dcterms:conformsTo
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.CONTRIBUTOR">
            <summary>
            dcterms:contributor
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.COVERAGE">
            <summary>
            dcterms:coverage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.CREATED">
            <summary>
            dcterms:created
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.CREATOR">
            <summary>
            dcterms:creator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.DATE">
            <summary>
            dcterms:date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.DATE_ACCEPTED">
            <summary>
            dcterms:dateAccepted
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.DATE_COPYRIGHTED">
            <summary>
            dcterms:dateCopyrighted
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.DATE_SUBMITTED">
            <summary>
            dcterms:dateSubmitted
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.DESCRIPTION">
            <summary>
            dcterms:description
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.EDUCATION_LEVEL">
            <summary>
            dcterms:educationLevel
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.EXTENT">
            <summary>
            dcterms:extent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.FILE_FORMAT">
            <summary>
            dcterms:FileFormat
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.FORMAT">
            <summary>
            dcterms:format
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.FREQUENCY">
            <summary>
            dcterms:Frequency
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.HAS_FORMAT">
            <summary>
            dcterms:hasFormat
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.HAS_PART">
            <summary>
            dcterms:hasPart
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.HAS_VERSION">
            <summary>
            dcterms:hasVersion
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.IDENTIFIER">
            <summary>
            dcterms:identifier
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.INSTRUCTIONAL_METHOD">
            <summary>
            dcterms:instructionalMethod
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.IS_FORMAT_OF">
            <summary>
            dcterms:isFormatOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.IS_PART_OF">
            <summary>
            dcterms:isPartOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.IS_REFERENCED_BY">
            <summary>
            dcterms:isReferencedBy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.IS_REPLACED_BY">
            <summary>
            dcterms:isReplacedBy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.IS_REQUIRED_BY">
            <summary>
            dcterms:isRequiredBy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.ISSUED">
            <summary>
            dcterms:issued
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.IS_VERSION_OF">
            <summary>
            dcterms:isVersionOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.JURISDICTION">
            <summary>
            dcterms:Jurisdiction
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.LANGUAGE">
            <summary>
            dcterms:language
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.LICENSE">
            <summary>
            dcterms:license
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.LICENSE_DOCUMENT">
            <summary>
            dcterms:LicenseDocument
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.LINGUISTIC_SYSTEM">
            <summary>
            dcterms:LinguisticSystem
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.LOCATION">
            <summary>
            dcterms:Location
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.LOCATION_PERIOD_OR_JURISDICTION">
            <summary>
            dcterms:LocationPeriodOrJurisdiction
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.MEDIATOR">
            <summary>
            dcterms:mediator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.MEDIA_TYPE">
            <summary>
            dcterms:MediaType
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.MEDIA_TYPE_OR_EXTENT">
            <summary>
            dcterms:MediaTypeOrExtent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.MEDIUM">
            <summary>
            dcterms:medium
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.METHOD_OF_ACCRUAL">
            <summary>
            dcterms:MethodOfAccrual
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.METHOD_OF_INSTRUCTION">
            <summary>
            dcterms:MethodOfInstruction
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.MODIFIED">
            <summary>
            dcterms:modified
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.PERIOD_OF_TIME">
            <summary>
            dcterms:PeriodOfTime
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.PHYSICAL_MEDIUM">
            <summary>
            dcterms:PhysicalMedium
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.PHYSICAL_RESOURCE">
            <summary>
            dcterms:PhysicalResource
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.POLICY">
            <summary>
            dcterms:Policy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.PROVENANCE">
            <summary>
            dcterms:provenance
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.PROVENANCE_STATEMENT">
            <summary>
            dcterms:ProvenanceStatement
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.PUBLISHER">
            <summary>
            dcterms:publisher
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.REFERENCES">
            <summary>
            dcterms:references
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.RELATION">
            <summary>
            dcterms:relation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.REPLACES">
            <summary>
            dcterms:replaces
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.REQUIRES">
            <summary>
            dcterms:requires
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.RIGHTS">
            <summary>
            dcterms:rights
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.RIGHTS_STATEMENT">
            <summary>
            dcterms:RightsStatement
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.RIGHTS_HOLDER">
            <summary>
            dcterms:rightsHolder
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.SIZE_OR_DURATION">
            <summary>
            dcterms:SizeOrDuration
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.SOURCE">
            <summary>
            dcterms:source
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.SPATIAL">
            <summary>
            dcterms:spatial
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.STANDARD">
            <summary>
            dcterms:Standard
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.SUBJECT">
            <summary>
            dcterms:subject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.TABLE_OF_CONTENTS">
            <summary>
            dcterms:tableOfContents
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.TEMPORAL">
            <summary>
            dcterms:temporal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.TITLE">
            <summary>
            dcterms:title
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.TYPE">
            <summary>
            dcterms:type
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DC_TERMS.VALID">
            <summary>
            dcterms:valid
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.FOAF">
            <summary>
            FOAF represents the Friend-of-a-Friend vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PREFIX">
            <summary>
            foaf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.BASE_URI">
            <summary>
            xmlns:foaf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.AGENT">
            <summary>
            foaf:Agent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PERSON">
            <summary>
            foaf:Person
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.NAME">
            <summary>
            foaf:name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.TITLE">
            <summary>
            foaf:title
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.IMG">
            <summary>
            foaf:img
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.DEPICTION">
            <summary>
            foaf:depiction
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.DEPICTS">
            <summary>
            foaf:depicts
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.FAMILY_NAME">
            <summary>
            foaf:familyName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.GIVEN_NAME">
            <summary>
            foaf:givenName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.KNOWS">
            <summary>
            foaf:knows
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.BASED_NEAR">
            <summary>
            foaf:based_near
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.AGE">
            <summary>
            foaf:age
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MADE">
            <summary>
            foaf:made
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MAKER">
            <summary>
            foaf:maker
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PRIMARY_TOPIC">
            <summary>
            foaf:primaryTopic
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.IS_PRIMARY_TOPIC_OF">
            <summary>
            foaf:isPrimaryTopicOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PROJECT">
            <summary>
            foaf:Project
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ORGANIZATION">
            <summary>
            foaf:Organization
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.GROUP">
            <summary>
            foaf:Group
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.DOCUMENT">
            <summary>
            foaf:Document
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.IMAGE">
            <summary>
            foaf:Image
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MEMBER">
            <summary>
            foaf:member
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.FOCUS">
            <summary>
            foaf:focus
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.NICK">
            <summary>
            foaf:nick
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MBOX">
            <summary>
            foaf:mbox
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.HOMEPAGE">
            <summary>
            foaf:homepage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.WEBLOG">
            <summary>
            foaf:weblog
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.OPEN_ID">
            <summary>
            foaf:openid
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.JABBER_ID">
            <summary>
            foaf:jabberID
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MBOX_SHA1SUM">
            <summary>
            foaf:mbox_sha1sum
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.INTEREST">
            <summary>
            foaf:interest
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.TOPIC_INTEREST">
            <summary>
            foaf:topic_interest
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.TOPIC">
            <summary>
            foaf:topic
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PAGE">
            <summary>
            foaf:page
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.WORKPLACE_HOMEPAGE">
            <summary>
            foaf:workplaceHomepage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.WORKINFO_HOMEPAGE">
            <summary>
            foaf:workinfoHomepage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.SCHOOL_HOMEPAGE">
            <summary>
            foaf:schoolHomepage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PUBLICATIONS">
            <summary>
            foaf:publications
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.CURRENT_PROJECT">
            <summary>
            foaf:currentProject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PAST_PROJECT">
            <summary>
            foaf:pastProject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ACCOUNT">
            <summary>
            foaf:account
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ONLINE_ACCOUNT">
            <summary>
            foaf:OnlineAccount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ACCOUNT_NAME">
            <summary>
            foaf:accountName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ACCOUNT_SERVICE_HOMEPAGE">
            <summary>
            foaf:accountServiceHomepage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PERSONAL_PROFILE_DOCUMENT">
            <summary>
            foaf:PersonalProfileDocument
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.TIPJAR">
            <summary>
            foaf:tipjar
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.SHA1">
            <summary>
            foaf:sha1
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.THUMBNAIL">
            <summary>
            foaf:thumbnail
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.LOGO">
            <summary>
            foaf:logo
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PHONE">
            <summary>
            foaf:phone
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.STATUS">
            <summary>
            foaf:status
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.GENDER">
            <summary>
            foaf:gender
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.BIRTHDAY">
            <summary>
            foaf:birthday
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.GEO">
            <summary>
            GEO represents the W3C GEO vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.PREFIX">
            <summary>
            geo
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.BASE_URI">
            <summary>
            xmlns:geo
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.LAT">
            <summary>
            geo:lat
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.LONG">
            <summary>
            geo:long
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.LAT_LONG">
            <summary>
            geo:lat_long
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.ALT">
            <summary>
            geo:alt
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.POINT">
            <summary>
            geo:Point
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.SPATIAL_THING">
            <summary>
            geo:SpatialThing
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.LOCATION">
            <summary>
            geo:location
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.SKOS">
            <summary>
            SKOS represents the W3C SKOS vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.PREFIX">
            <summary>
            skos
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.BASE_URI">
            <summary>
            xmlns:skos
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.CONCEPT">
            <summary>
            skos:Concept
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.CONCEPT_SCHEME">
            <summary>
            skos:ConceptScheme
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.IN_SCHEME">
            <summary>
            skos:inScheme
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.HAS_TOP_CONCEPT">
            <summary>
            skos:hasTopConcept
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.TOP_CONCEPT_OF">
            <summary>
            skos:topConceptOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.ALT_LABEL">
            <summary>
            skos:altLabel
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.HIDDEN_LABEL">
            <summary>
            skos:hiddenLabel
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.PREF_LABEL">
            <summary>
            skos:prefLabel
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.NOTATION">
            <summary>
            skos:notation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.CHANGE_NOTE">
            <summary>
            skos:changeNote
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.DEFINITION">
            <summary>
            skos:definition
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.EXAMPLE">
            <summary>
            skos:example
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.EDITORIAL_NOTE">
            <summary>
            skos:editorialNote
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.HISTORY_NOTE">
            <summary>
            skos:historyNote
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.NOTE">
            <summary>
            skos:note
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SCOPE_NOTE">
            <summary>
            skos:scopeNote
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.BROADER">
            <summary>
            skos:broader
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.BROADER_TRANSITIVE">
            <summary>
            skos:broaderTransitive
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.NARROWER">
            <summary>
            skos:narrower
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.NARROWER_TRANSITIVE">
            <summary>
            skos:narrowerTransitive
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.RELATED">
            <summary>
            skos:related
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SEMANTIC_RELATION">
            <summary>
            skos:semanticRelation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SUBJECT">
            <summary>
            skos:subject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.COLLECTION">
            <summary>
            skos:Collection
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.ORDERED_COLLECTION">
            <summary>
            skos:OrderedCollection
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.MEMBER">
            <summary>
            skos:member
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.MEMBER_LIST">
            <summary>
            skos:memberList
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.BROAD_MATCH">
            <summary>
            skos:broadMatch
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.CLOSE_MATCH">
            <summary>
            skos:closeMatch
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.NARROW_MATCH">
            <summary>
            skos:narrowMatch
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.RELATED_MATCH">
            <summary>
            skos:relatedMatch
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.EXACT_MATCH">
            <summary>
            skos:exactMatch
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.MAPPING_RELATION">
            <summary>
            skos:mappingRelation
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.RSS">
            <summary>
            RSS represents the RSS 1.0 vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RSS.PREFIX">
            <summary>
            rss
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RSS.BASE_URI">
            <summary>
            xmlns:rss
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RSS.CHANNEL">
            <summary>
            rss:channel
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RSS.TITLE">
            <summary>
            rss:title
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RSS.LINK">
            <summary>
            rss:link
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RSS.DESCRIPTION">
            <summary>
            rss:description
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RSS.IMAGE">
            <summary>
            rss:image
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RSS.ITEMS">
            <summary>
            rss:items
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RSS.TEXT_INPUT">
            <summary>
            rss:textinput
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RSS.ITEM">
            <summary>
            rss:item
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RSS.NAME">
            <summary>
            rss:name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RSS.URL">
            <summary>
            rss:url
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.DBPEDIA">
            <summary>
            DBPEDIA represents the DBPEDIA vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DBPEDIA.PREFIX">
            <summary>
            dbpedia
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DBPEDIA.BASE_URI">
            <summary>
            xmlns:dbpedia
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DBPEDIA.RESOURCE">
            <summary>
            dbpedia:resource
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DBPEDIA.CLASS">
            <summary>
            dbpedia:class
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DBPEDIA.ONTOLOGY">
            <summary>
            dbpedia:ontology
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DBPEDIA.PROPERTY">
            <summary>
            dbpedia:property
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.OG">
            <summary>
            OG represents the Open Graph Protocol Vocabulary
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.PREFIX">
            <summary>
            og
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.BASE_URI">
            <summary>
            xmlns:og
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.TITLE">
            <summary>
            og:title
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.TYPE">
            <summary>
            og:type
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.URL">
            <summary>
            og:url
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.IMAGE">
            <summary>
            og:image
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.IMAGE_SECURE_URL">
            <summary>
            og:image:secure_url
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.IMAGE_TYPE">
            <summary>
            og:image:type
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.IMAGE_WIDTH">
            <summary>
            og:image:width
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.IMAGE_HEIGHT">
            <summary>
            og:image:height
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.AUDIO">
            <summary>
            og:audio
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.AUDIO_SECURE_URL">
            <summary>
            og:audio:secure_url
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.AUDIO_TYPE">
            <summary>
            og:audio:type
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.DESCRIPTION">
            <summary>
            og:description
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.DETERMINER">
            <summary>
            og:determiner
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.LOCALE">
            <summary>
            og:locale
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.LOCALE_ALTERNATE">
            <summary>
            og:locale:alternate
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.SITE_NAME">
            <summary>
            og:site_name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.VIDEO">
            <summary>
            og:video
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.VIDEO_SECURE_URL">
            <summary>
            og:video:secure_url
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.VIDEO_TYPE">
            <summary>
            og:video:type
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.VIDEO_WIDTH">
            <summary>
            og:video:width
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.VIDEO_HEIGHT">
            <summary>
            og:video:height
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.OG.OG_MUSIC">
            <summary>
            OG_MUSIC represents music-related concepts in Open Graph Protocol Vocabulary
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_MUSIC.PREFIX">
            <summary>
            ogm
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_MUSIC.BASE_URI">
            <summary>
            xmlns:ogm
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_MUSIC.SONG">
            <summary>
            ogm:song
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_MUSIC.SONG_DISC">
            <summary>
            ogm:song:disc
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_MUSIC.SONG_TRACK">
            <summary>
            ogm:song:track
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_MUSIC.DURATION">
            <summary>
            ogm:duration
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_MUSIC.ALBUM">
            <summary>
            ogm:album
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_MUSIC.ALBUM_DISC">
            <summary>
            ogm:album:disc
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_MUSIC.ALBUM_TRACK">
            <summary>
            ogm:album:track
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_MUSIC.MUSICIAN">
            <summary>
            ogm:musician
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_MUSIC.RELEASE_DATE">
            <summary>
            ogm:release_date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_MUSIC.PLAYLIST">
            <summary>
            ogm:playlist
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_MUSIC.CREATOR">
            <summary>
            ogm:creator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_MUSIC.RADIO_STATION">
            <summary>
            ogm:radio_station
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.OG.OG_VIDEO">
            <summary>
            OG_VIDEO represents video-related concepts in Open Graph Protocol Vocabulary
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_VIDEO.PREFIX">
            <summary>
            ogv
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_VIDEO.BASE_URI">
            <summary>
            xmlns:ogv
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_VIDEO.MOVIE">
            <summary>
            ogv:movie
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_VIDEO.ACTOR">
            <summary>
            ogv:actor
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_VIDEO.ACTOR_ROLE">
            <summary>
            ogv:actor:role
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_VIDEO.DIRECTOR">
            <summary>
            ogv:director
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_VIDEO.WRITER">
            <summary>
            ogv:writer
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_VIDEO.DURATION">
            <summary>
            ogv:duration
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_VIDEO.RELEASE_DATE">
            <summary>
            ogv:release_date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_VIDEO.TAG">
            <summary>
            ogv:tag
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_VIDEO.EPISODE">
            <summary>
            ogv:episode
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_VIDEO.SERIES">
            <summary>
            ogv:series
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_VIDEO.TV_SHOW">
            <summary>
            ogv:tv_show
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_VIDEO.OTHER">
            <summary>
            ogv:other
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.OG.OG_ARTICLE">
            <summary>
            OG_ARTICLE represents article-related concepts in Open Graph Protocol Vocabulary
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_ARTICLE.PREFIX">
            <summary>
            oga
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_ARTICLE.BASE_URI">
            <summary>
            xmlns:oga
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_ARTICLE.PUBLISHED_TIME">
            <summary>
            oga:published_time
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_ARTICLE.MODIFIED_TIME">
            <summary>
            oga:modified_time
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_ARTICLE.EXPIRATION_TIME">
            <summary>
            oga:expiration_time
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_ARTICLE.AUTHOR">
            <summary>
            oga:author
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_ARTICLE.SECTION">
            <summary>
            oga:section
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_ARTICLE.TAG">
            <summary>
            oga:tag
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.OG.OG_BOOK">
            <summary>
            OG_BOOK represents book-related concepts in Open Graph Protocol Vocabulary
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_BOOK.PREFIX">
            <summary>
            ogb
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_BOOK.BASE_URI">
            <summary>
            xmlns:ogb
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_BOOK.AUTHOR">
            <summary>
            ogb:author
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_BOOK.ISBN">
            <summary>
            ogb:isbn
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_BOOK.RELEASE_DATE">
            <summary>
            ogb:release_date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_BOOK.TAG">
            <summary>
            ogb:tag
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.OG.OG_PROFILE">
            <summary>
            OG_PROFILE represents profile-related concepts in Open Graph Protocol Vocabulary
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_PROFILE.PREFIX">
            <summary>
            ogp
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_PROFILE.BASE_URI">
            <summary>
            xmlns:ogp
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_PROFILE.FIRST_NAME">
            <summary>
            ogp:first_name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_PROFILE.LAST_NAME">
            <summary>
            ogp:last_name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_PROFILE.USERNAME">
            <summary>
            ogp:username
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_PROFILE.GENDER">
            <summary>
            ogp:gender
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.OG.OG_WEBSITE">
            <summary>
            OG_WEBSITE represents website-related concepts in Open Graph Protocol Vocabulary
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_WEBSITE.PREFIX">
            <summary>
            ogw
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OG.OG_WEBSITE.BASE_URI">
            <summary>
            xmlns:ogw
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums">
            <summary>
            RDFModelEnums represents a collector for all the enumerations used by the "RDFSharp.Model" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums.RDFFormats">
            <summary>
            RDFFormats represents an enumeration for supported RDF graph serialization data formats.
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums.RDFTripleFlavors">
            <summary>
            RDFTripleFlavors represents an enumeration for possible triple pattern flavors.
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums.RDFContainerTypes">
            <summary>
            RDFContainerTypes represents an enumeration for supported container types.
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums.RDFItemTypes">
            <summary>
            RDFItemTypes represents an enumeration for acceptable RDFContainer and RDFCollection item types.
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums.RDFDatatypeCategory">
            <summary>
            RDFDatatypeCategory represents an enumeration for supported categories of datatype
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFGraphMetadata">
            <summary>
            RDFGraphMetadata represents a collector for metadata describing contents of a RDFGraph.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphMetadata.#ctor">
            <summary>
            Default ctor to build an empty metadata
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphMetadata.CollectNamespaces(RDFSharp.Model.RDFTriple)">
            <summary>
            Collects the namespaces used by the given triple
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphMetadata.CollectContainers(RDFSharp.Model.RDFTriple)">
            <summary>
            Verifies if the given triple carries a container subj and, if so, collects it
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphMetadata.CollectCollections(RDFSharp.Model.RDFTriple)">
            <summary>
            Verifies if the given triple carries a collection subj and, if so, collects it
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphMetadata.ClearMetadata">
            <summary>
            Clears the metadata of the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphMetadata.UpdateMetadata(RDFSharp.Model.RDFTriple)">
            <summary>
            Updates the metadata of the graph with the info carried by the given triple 
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraphMetadata.Namespaces">
            <summary>
            List of registered namespaces used by the graph
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraphMetadata.Containers">
            <summary>
            Dictionary of resources acting as container subjects in the graph
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraphMetadata.Collections">
            <summary>
            Dictionary of resources acting as collection subjects in the graph
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFContext">
            <summary>
            RDFContext represents an object which can act as C-token of a pattern. 
            It cannot start with "bnode:" because blank contexts are not supported.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFContext.#ctor">
            <summary>
            Default-ctor to build a predefined context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFContext.#ctor(System.String)">
            <summary>
            String-based ctor to build a context from the given string 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFContext.#ctor(System.Uri)">
            <summary>
            Uri-based ctor to build a context from the given Uri
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFContext.ToString">
            <summary>
            Gives the string representation of the store context
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFContext.Context">
            <summary>
            Uri representing the context of the pattern
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFConstructQuery">
            <summary>
            RDFConstructQuery is the SPARQL "CONSTRUCT" query implementation.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.#ctor">
            <summary>
            Default-ctor to build an empty CONSTRUCT query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ToString">
            <summary>
            Gives the string representation of the CONSTRUCT query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.AddTemplate(RDFSharp.Query.RDFPattern)">
            <summary>
            Adds the given pattern to the templates of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.AddPatternGroup(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Adds the given pattern group to the body of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.AddModifier(RDFSharp.Query.RDFLimitModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.AddModifier(RDFSharp.Query.RDFOffsetModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ApplyToGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Applies the query to the given graph 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ApplyToStore(RDFSharp.Store.RDFStore)">
            <summary>
            Applies the query to the given store 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ApplyToFederation(RDFSharp.Store.RDFFederation)">
            <summary>
            Applies the query to the given federation
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFConstructQuery.Templates">
            <summary>
            List of template patterns carried by the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFConstructQuery.PatternGroups">
            <summary>
            List of body pattern groups carried by the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFConstructQuery.PatternResultTables">
            <summary>
            Dictionary of pattern result tables
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFConstructQuery.PatternGroupResultTables">
            <summary>
            Dictionary of pattern group result tables
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFConstructQuery.Variables">
            <summary>
            List of variables carried by the template patterns of the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFConstructQuery.Modifiers">
            <summary>
            List of modifiers carried by the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFConstructQuery.IsEmpty">
            <summary>
            Checks if the query is empty, so contains no template patterns
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFAskQuery">
            <summary>
            RDFAskQuery is the SPARQL "ASK" query implementation.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.#ctor">
            <summary>
            Default-ctor to build an empty ASK query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ToString">
            <summary>
            Gives the string representation of the ASK query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.AddPatternGroup(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Adds the given pattern group to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ApplyToGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Applies the query to the given graph 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ApplyToStore(RDFSharp.Store.RDFStore)">
            <summary>
            Applies the query to the given store 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ApplyToFederation(RDFSharp.Store.RDFFederation)">
            <summary>
            Applies the query to the given federation
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAskQuery.PatternGroups">
            <summary>
            List of pattern groups carried by the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAskQuery.PatternResultTables">
            <summary>
            Dictionary of pattern result tables
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAskQuery.PatternGroupResultTables">
            <summary>
            Dictionary of pattern group result tables
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAskQuery.IsEmpty">
            <summary>
            Checks if the query is empty, so contains no pattern groups
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFNamespaceRegister">
            <summary>
            RDFNamespaceRegister is a singleton container for registered RDF namespaces.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.#cctor">
            <summary>
            Default-ctor to initialize the singleton instance of the register
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.System#Collections#Generic#IEnumerable{RDFSharp#Model#RDFNamespace}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the register's namespaces
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the register's namespaces
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.SetDefaultNamespace(RDFSharp.Model.RDFNamespace)">
            <summary>
            Sets the given namespace as default namespace of the library 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.AddNamespace(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given namespace to the register, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.RemoveNamespace(RDFSharp.Model.RDFNamespace)">
            <summary>
            Removes the given namespace from the register
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.ContainsNamespace(RDFSharp.Model.RDFNamespace)">
            <summary>
            Checks for existence of the given namespace in the register by seeking presence of its prefix or its uri
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.GetByNamespace(System.String)">
            <summary>
            Retrieves a namespace from the register by seeking presence of its uri
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.GetByPrefix(System.String)">
            <summary>
            Retrieves a namespace from the register by seeking presence of its prefix
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespaceRegister.DefaultNamespace">
            <summary>
            Default namespace of the library
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespaceRegister.Instance">
            <summary>
            Singleton instance of the RDFNamespaceRegister class
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespaceRegister.Register">
            <summary>
            List of registered namespaces
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespaceRegister.NamespacesCount">
            <summary>
            Count of the register's namespaces
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespaceRegister.NamespacesEnumerator">
            <summary>
            Gets the enumerator on the register's namespaces for iteration
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEvents">
            <summary>
            RDFModelEvents represents a collector for all the events generated within the "RDFSharp.Model" namespace
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelEvents.RaiseModelInfo(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelEvents.RaiseModelWarning(System.String)">
            <summary>
            Internal invoker of the subscribed warning event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Model.RDFModelEvents.OnModelInfo">
            <summary>
            Event representing an information message generated within the "RDFSharp.Model" namespace
            </summary>
        </member>
        <member name="E:RDFSharp.Model.RDFModelEvents.OnModelWarning">
            <summary>
            Event representing a warning message generated within the "RDFSharp.Model" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEvents.RDFModelInfoEventHandler">
            <summary>
            Delegate to handle information events generated within the "RDFSharp.Model" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEvents.RDFModelWarningEventHandler">
            <summary>
            Delegate to handle warning events generated within the "RDFSharp.Model" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFRegexFilter">
            <summary>
            RDFRegexFilter represents a filter applying a regular expression on the values of a variable.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFRegexFilter.#ctor(RDFSharp.Query.RDFVariable,System.Text.RegularExpressions.Regex)">
            <summary>
            Default-ctor to build a filter on the given variable for the given regular expression 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFRegexFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFRegexFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFRegexFilter.Variable">
            <summary>
            Variable to be filtered
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFRegexFilter.RegEx">
            <summary>
            Regular Expression to be filtered
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFIsLiteralFilter">
            <summary>
            RDFIsLiteralFilter represents a filter for literal values of a variable.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsLiteralFilter.#ctor(RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a filter on the given variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsLiteralFilter.ToString">
            <summary>
            Gives the string representation of the filter 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsLiteralFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFIsLiteralFilter.Variable">
            <summary>
            Variable to be filtered
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTypedLiteral">
            <summary>
            RDFTypedLiteral represents a RDFLiteral which is denoted by a Datatype.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTypedLiteral.#ctor(System.String)">
            <summary>
            Default ctor to build a typed literal with value and default "xsd:string" datatype
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTypedLiteral.#ctor(System.String,RDFSharp.Model.RDFDatatype)">
            <summary>
            Default ctor to build a typed literal with value and datatype
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTypedLiteral.ToString">
            <summary>
            Gives the string representation of the typed literal
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTypedLiteral.Datatype">
            <summary>
            Mandatory datatype of the typed literal
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFGraph">
            <summary>
            RDFGraph represents a graph in the RDF model.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.#ctor">
            <summary>
            Default ctor to build an empty graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.#ctor(System.Collections.Generic.List{RDFSharp.Model.RDFTriple})">
            <summary>
            List-based ctor to build a graph with the given list of triples
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ToString">
            <summary>
            Gives the string representation of the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.Equals(RDFSharp.Model.RDFGraph)">
            <summary>
            Performs the equality comparison between two graphs
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.System#Collections#Generic#IEnumerable{RDFSharp#Model#RDFTriple}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the graph's triples
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the graph's triples
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.SetContext(System.Uri)">
            <summary>
            Sets the context of the graph to the given Uri (null or blank-node Uris are not accepted)
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.AddTriple(RDFSharp.Model.RDFTriple)">
            <summary>
            Adds the given triple to the graph, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.AddContainer(RDFSharp.Model.RDFContainer)">
            <summary>
            Adds the given container to the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.AddCollection(RDFSharp.Model.RDFCollection)">
            <summary>
            Adds the given collection to the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriple(RDFSharp.Model.RDFTriple)">
            <summary>
            Removes the given triple from the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the triples with the given subject
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the triples with the given (non-blank) predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the triples with the given resource as object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the triples with the given literal as object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ClearTriples">
            <summary>
            Clears the triples and metadata of the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ContainsTriple(RDFSharp.Model.RDFTriple)">
            <summary>
            Checks if the graph contains the given triple
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.SelectTriplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Gets the subgraph containing triples with the specified resource as subject 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.SelectTriplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Gets the subgraph containing triples with the specified resource as predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.SelectTriplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Gets the subgraph containing triples with the specified resource as object 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.SelectTriplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets the subgraph containing triples with the specified literal as object 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.IntersectWith(RDFSharp.Model.RDFGraph)">
            <summary>
            Builds a new intersection graph from this graph and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.UnionWith(RDFSharp.Model.RDFGraph)">
            <summary>
            Builds a new union graph from this graph and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.DifferenceWith(RDFSharp.Model.RDFGraph)">
            <summary>
            Builds a new difference graph from this graph and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ToDataTable">
            <summary>
            Converts the graph into a "Subject-Predicate-Object" datatable 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.FromDataTable(System.Data.DataTable)">
            <summary>
            Creates a graph from a "Subject-Predicate-Object" datatable 
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraph.Context">
            <summary>
            Uri of the graph
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraph.TriplesCount">
            <summary>
            Count of the graph's triples
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraph.TriplesEnumerator">
            <summary>
            Gets the enumerator on the graph's triples for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraph.GraphMetadata">
            <summary>
            Metadata of the graph
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraph.GraphIndex">
            <summary>
            Index on the triples of the graph
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraph.Triples">
            <summary>
            List of triples embedded into the graph
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFSQLServerStore">
            <summary>
            RDFSQLServerStore represents a RDFStore backed on SQL Server engine
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Default-ctor to build a SQL Server store instance with SQL Server authentication
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.#ctor(System.String,System.String)">
            <summary>
            Default-ctor to build a SQL Server store instance with Windows Integrated Security authentication
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.ToString">
            <summary>
            Gives the string representation of the SQL Server store 
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.MergeGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Merges the given graph into the store within a single transaction, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.AddQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Adds the given quadruple to the store, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Removes the given quadruples from the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByContext(RDFSharp.Store.RDFContext)">
            <summary>
            Removes the quadruples with the given context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given resource as object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.RemoveQuadruplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given literal as object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.ClearQuadruples">
            <summary>
            Clears the quadruples of the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.ContainsQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Checks if the store contains the given quadruple
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.SelectAllQuadruples">
            <summary>
            Gets a store containing all quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.SelectQuadruplesByContext(RDFSharp.Store.RDFContext)">
            <summary>
            Gets a memory store containing quadruples with the specified context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.SelectQuadruplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Gets a memory store containing quadruples with the specified subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.SelectQuadruplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Gets a memory store containing quadruples with the specified predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.SelectQuadruplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Gets a memory store containing quadruples with the specified object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.SelectQuadruplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets a memory store containing quadruples with the specified literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.SelectQuadruples(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets a memory store containing quadruples satisfying the given pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.Diagnostics">
            <summary>
            Performs the preliminary diagnostics controls on the underlying SQL Server database
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.PrepareStore">
            <summary>
            Prepares the underlying SQL Server database
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFSQLServerStore.OptimizeStore">
            <summary>
            Executes a special command to optimize SQL Server store
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFSQLServerStore.Connection">
            <summary>
            Connection to the SQL Server database
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreSerializer">
            <summary>
            RDFStoreSerializer exposes choices to read and write RDF store data in supported formats.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreSerializer.WriteRDF(RDFSharp.Store.RDFStoreEnums.RDFFormats,RDFSharp.Store.RDFStore,System.String)">
            <summary>
            Writes the given store to the given file in the given RDF format. 
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryException">
            <summary>
            RDFQueryException represents an exception thrown during creation and execution of SPARQL queries.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryException.#ctor">
            <summary>
            Basic ctor to throw an empty RDFQueryException
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryException.#ctor(System.String)">
            <summary>
            Basic ctor to throw an RDFQueryException with message
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryException.#ctor(System.String,System.Exception)">
            <summary>
            Basic ctor to throw an RDFQueryException with message and inner exception
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Basic ctor to support serialization of a remotely thrown RDFQueryException
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSelectQuery">
            <summary>
            RDFSelectQuery is the SPARQL "SELECT" query implementation.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.#ctor">
            <summary>
            Default-ctor to build an empty SELECT query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ToString">
            <summary>
            Gives the string representation of the SELECT query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.AddPatternGroup(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Adds the given pattern group to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.AddModifier(RDFSharp.Query.RDFModifier)">
            <summary>
            Adds the given modifier to the SELECT query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Applies the query to the given graph 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToStore(RDFSharp.Store.RDFStore)">
            <summary>
            Applies the query to the given store 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToFederation(RDFSharp.Store.RDFFederation)">
            <summary>
            Applies the query to the given federation
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSelectQuery.PatternGroups">
            <summary>
            List of pattern groups carried by the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSelectQuery.Modifiers">
            <summary>
            List of modifiers carried by the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSelectQuery.PatternResultTables">
            <summary>
            Dictionary of pattern result tables
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSelectQuery.PatternGroupResultTables">
            <summary>
            Dictionary of pattern group result tables
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSelectQuery.IsStar">
            <summary>
            Checks if the query is a "SELECT *" query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSelectQuery.IsEmpty">
            <summary>
            Checks if the query is empty, so contains no pattern groups
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFOrderByModifier">
            <summary>
            RDFOrderByModifier is a modifier which applies a sort on the results of a SELECT query for the given variable. 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOrderByModifier.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFQueryEnums.RDFOrderByFlavors)">
            <summary>
            Default-ctor to build an OrderBy modifier of the given flavor on the given variable 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOrderByModifier.ToString">
            <summary>
            Gives the string representation of the modifier 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOrderByModifier.ApplyModifier(System.Data.DataTable)">
            <summary>
            Applies the modifier on the column corresponding to the variable in the given datatable 
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFOrderByModifier.Variable">
            <summary>
            Variable to be ordered
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFOrderByModifier.OrderByFlavor">
            <summary>
            Flavor of variable ordering (ASC/DESC)
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFOffsetModifier">
            <summary>
            RDFOffsetModifier is a modifier which makes the first N query results to be not considered.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOffsetModifier.#ctor(System.Int32)">
            <summary>
            Default-ctor to build an Offset modifier on a query 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOffsetModifier.ToString">
            <summary>
            Gives the string representation of the modifier 
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOffsetModifier.ApplyModifier(System.Data.DataTable)">
            <summary>
            Applies the modifier on the given datatable 
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFOffsetModifier.Offset">
            <summary>
            Number of results not considered from the query
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFPattern">
            <summary>
            RDFPattern represents a search pattern over a collection of RDF data.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPattern.#ctor(RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Default ctor for SPO pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPattern.#ctor(RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Default ctor for CSPO pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPattern.ToString">
            <summary>
            Gives the string representation of the pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPattern.Equals(RDFSharp.Query.RDFPattern)">
            <summary>
            Performs the equality comparison between two patterns
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPattern.Optional">
            <summary>
            Sets the pattern as Optional
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPattern.UnionWithNext">
            <summary>
            Sets the pattern to be joined as Union with the next pattern
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.PatternID">
            <summary>
            Unique representation of the pattern
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.Context">
            <summary>
            Member acting as context token of the pattern
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.Subject">
            <summary>
            Member acting as subject token of the pattern
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.Predicate">
            <summary>
            Member acting as predicate token of the pattern
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.Object">
            <summary>
            Member acting as object token of the pattern
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.IsOptional">
            <summary>
            Flag indicating the pattern as Optional
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.JoinAsUnion">
            <summary>
            Flag indicating the pattern to be joined as union
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.Variables">
            <summary>
            List of variables carried by the pattern
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFGraphSerializer">
            <summary>
            RDFGraphSerializer exposes choices to read and write RDF graph data in supported formats.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphSerializer.WriteRDF(RDFSharp.Model.RDFModelEnums.RDFFormats,RDFSharp.Model.RDFGraph,System.String)">
            <summary>
            Writes the given graph to the given file in the given RDF format. 
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphSerializer.ReadRDF(RDFSharp.Model.RDFModelEnums.RDFFormats,System.String)">
            <summary>
            Reads the given file in the given RDF format to a graph. 
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFCollection">
            <summary>
            RDFCollection represents a generic collection in the RDF model.
            It is made up of items, which must be all resources or all literals.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.#ctor(RDFSharp.Model.RDFModelEnums.RDFItemTypes)">
            <summary>
            Default ctor to build an empty collection of the given flavor
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.#ctor(RDFSharp.Model.RDFModelEnums.RDFItemTypes,System.Collections.ArrayList)">
            <summary>
            List-based ctor to build a collection of the given flavor with given items
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the collection's items
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.AddItem(System.Object)">
            <summary>
            Adds the given item to the collection, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.RemoveItem(System.Object)">
            <summary>
            Removes the given item from the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.ClearItems">
            <summary>
            Removes all the items from the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.ReifyCollection">
            <summary>
            Builds the reification graph of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.ItemType">
            <summary>
            Type of the items of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.ReificationSubject">
            <summary>
            Subject of the collection's reification
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.ItemsCount">
            <summary>
            Count of the collection's items
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.ItemsEnumerator">
            <summary>
            Gets the enumerator on the collection's items for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.Items">
            <summary>
            List of the items collected by the collection
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFCollectionItem">
            <summary>
            RDFCollectionItem represents an item of a collection
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollectionItem.#ctor(RDFSharp.Model.RDFModelEnums.RDFItemTypes,System.Object,System.Object)">
            <summary>
            Default-ctor to build a RDFCollectionItem with the given parameters
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollectionItem.ItemType">
            <summary>
            Type of the collection item
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollectionItem.ItemValue">
            <summary>
            Value of the collection item
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollectionItem.ItemNext">
            <summary>
            Pointer to the next item of the collection
            </summary>
        </member>
    </members>
</doc>
